In C, the increment (++) and decrement (--) operators are important arithmetic operators that allow you to increase or decrease a variable's value by one. These operators come in two forms: prefix and postfix, each with its own behavior and side effects. In this topic, you will learn about the increment and decrement operators, their different forms, and the best practices for using them.

\bold Increment (++) and Decrement (--) Operators

Use the increment (++) and decrement (--) operators to change a variable's value by adding or subtracting one, respectively. These are unary operators, meaning they operate on a single operand (a variable or another entity participating in the operation). Here is the basic syntax for these operators:

c

++someVariable; // Prefix increment
--someVariable; // Prefix decrement
someVariable++; // Postfix increment
someVariable--; // Postfix decrement
c

In the postfix form, the operator is placed after the variable, while in the prefix form, it is placed before it. This placement difference affects the behavior of these operators and how they interact with other parts of an expression. Their behavior is discussed in the sections below.

Prefix Form: Write the prefix form of the increment and decrement operators before the variable, like ++someVariable or --someVariable. When you use the prefix form, the variable's value is changed first, and then the expression uses the updated value. Here is an example:

c

#include <stdio.h>

int main() {
    int number = 10;
    int addFive;
    printf("Number before: %d\n", number);
    int result = ++number; // First increment 'number', then use its value
    printf("Number after: %d\n", number);  // 'number' value increased by 1
    printf("Result: %d\n", result);        // 'result' value is 11, i.e., the changed value
    addFive = number + 5; // the updated value of 'number' (11) is used here
    printf("Sum: %d\n", addFive); // Now 'number' is 11, and 'result' is also 11
    return 0;
}
c

Output of this code snippet:

Number before: 10
Number after: 11
Result: 11
Sum: 16

Postfix Form: Write the postfix form of the increment and decrement operators after the variable, like someVariable++ or someVariable--. When you use the postfix form, the expression uses the variable's value first, and then changes the variable. Here is an example:

c

#include <stdio.h>

int main() {
    int number = 10;
    int addFive;
    printf("Number before: %d\n", number);
    int result = number++; // Use the value of 'number' first, then increment it.
    printf("Number after: %d\n", number);  // 'number' value increased by 1
    printf("Result: %d\n", result);
    addFive = number + 5; // the updated value of 'number' (11) is used here
    printf("Sum: %d\n", addFive); // Now 'number' is 11, but 'result' is still 10
    return 0;
}
c

Output of this code snippet:

Number before: 10
Number after: 11
Result: 10
Sum: 16

\bold Side Effects

Using the increment (++) and decrement (--) operators in C can have side effects that programmers need to be aware of. These side effects can lead to unexpected behavior or errors in your code if you are not careful. Let's discuss some common side effects:

    Confusion with Postfix Form: The postfix form of the increment and decrement operators can cause confusion in more complex expressions. Consider the following example:

c

int firstNum = 5;
int secondNum = 2 * firstNum++; // What is the value of 'secondNum'? 10 or 12?
c

The value of secondNum depends on when the postfix form (firstNum++) is appliedâ€”before or after the multiplication. To avoid confusion, you should use the prefix form or separate the increment from its use in expressions.

Rewritten example with prefix form:

c

int firstNum = 10;
int secondNum = 2 * ++firstNum; // 'secondNum' will always be 22 (2 * 11)
c

Here, the value of secondNum will always be 22 (2 * 11). This happens because the prefix form first increments firstNum and then uses the updated value (11) in the multiplication, ensuring consistent and predictable behavior.

Unintended Changes: Using the increment and decrement operators can lead to unintended changes to the original variable. This is especially problematic when using the postfix form. Look at the example below:

c

int firstNum = 10;
int result = firstNum++; // 'firstNum' is now 11, but 'result' is 10
c

In this case, if you planned to use the original value of firstNum in multiple places, using the postfix form can lead to errors.

Rewritten example with prefix form:

c

int firstNum = 10;
int result = ++firstNum; // 'firstNum' is now 11, and 'result' is also 11
c

Here, you first increment the variable firstNum and then assign the updated value to both firstNum and result. This ensures that both firstNum and result contain the same value, preventing any unintended change to the original variable.

Undefined Behavior with Multiple Modifications in One Expression: Using the increment or decrement operators multiple times in the same expression on the same variable can lead to undefined behavior. Look at the example below:

c

// (with undefined behavior):

#include <stdio.h>
int main() {
    int firstNum = 10;
    // UNDEFINED BEHAVIOR - Do not modify a single variable multiple times in one expression.
    int secondNum = firstNum++ + firstNum++;
    printf("%d\n", firstNum);
    printf("%d\n", secondNum);
    return 0;
}
c

In this case, the result is undefined because the order of evaluation of the subexpressions is not guaranteed. The C standard does not specify whether the first firstNum++ or the second firstNum++ will be evaluated first. The value of firstNum is modified twice in the same expression without a sequence point. The result of such an operation is unpredictable due to the unspecified order of evaluation.

IMPORTANT: Even using the prefix form in a similar situation does not solve the problem and also leads to undefined behavior according to the C standard (before C++17, C++ had a similar issue):

c

int secondNum = ++firstNum + ++firstNum; // Also UNDEFINED BEHAVIOR in C!
c

        Do not use a variable that has a side effect applied to it (increment/decrement) more than once in the same expression. If you do, the result may be undefined. In short, do not use multiple modifications of the same variable in a single expression. Otherwise, it will lead to undefined behavior.

\bold Best Practices

    Prefer Prefix Increment/Decrement: It is generally recommended to use the prefix form (++someVariable, --someVariable) instead of the postfix form (someVariable++, someVariable--), unless the behavior of the postfix form is explicitly required. The prefix form is often more efficient as it avoids the unnecessary overhead associated with creating a temporary copy of the variable (this is more relevant for C++ and complex types than for built-in types in C).

    Avoid Mixing Increment/Decrement with Other Operators: To avoid confusion and ensure predictable results, it is better to use the increment and decrement operators separately or in isolation. Mixing them with other operators in a single expression can lead to unexpected behavior, especially when using the postfix form.

c

// C Code demonstrating the difference:

#include <stdio.h>

int main() {
    int firstNum = 10;
    int secondNum = ++firstNum * 2; // Increment to 11 first, then multiplication 11*2=22
    printf("firstNum: %d, secondNum: %d\n", firstNum, secondNum); // 11, 22

    firstNum = 10; // Reset value
    secondNum = firstNum++ * 2; // Multiplication 10*2=20 first, then increment to 11
    printf("firstNum: %d, secondNum: %d\n", firstNum, secondNum); // 11, 20

    return 0;
}
c

In this example, the difference between prefix and postfix increment when combined with other operators is visible. In the first case, the prefix increment is used, so the value of firstNum is first incremented to 11 and then multiplied by 2, resulting in secondNum becoming 22. In the second case, the postfix increment is used, so the original value of firstNum (10) is used to calculate secondNum, and only then is firstNum incremented to 11. Therefore, secondNum is 20, not 22 as some might expect. Consequently, use the prefix increment/decrement to avoid confusion and undefined behavior. Separating operations into multiple lines often makes the code much clearer.